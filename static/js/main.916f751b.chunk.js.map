{"version":3,"sources":["util/map.ts","components/map/map.tsx","components/map/mapContainer.tsx","components/menu/menu.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["URL","L","Icon","Default","prototype","_getIconUrl","mergeOptions","iconRetinaUrl","require","iconUrl","shadowUrl","Map","forwardRef","ref","center","zoom","url","attribution","markersData","useImperativeHandle","fitBounds","mapRef","useRef","useEffect","map","latLng","layers","tileLayer","current","layerRef","React","featureGroup","addTo","$markers","marker","point","title","getBounds","maxZoom","id","MapContainer","fit","setFit","useState","markers","setMarkers","$map","navigator","geolocation","getCurrentPosition","position","handlePos","alert","coords","latitude","longitude","console","log","arr","push","Menu","className","onClick","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.916f751b.chunk.js","sourcesContent":["const style: string = \"zrcccrz/ckd1yhxh22g561ioaerfchy99\";\r\nconst token: string = \"pk.eyJ1IjoienJjY2NyeiIsImEiOiJjank2bjgzMzcwZmJqM2RsYjBtbjh2Z3F6In0.Bi-7OaOTBaJ43pJM-hAT-g\"\r\n\r\nconst URL: string = `https://api.mapbox.com/styles/v1/${style}/tiles/{z}/{x}/{y}?access_token=${token}`;\r\nconst ATTRIBUTION: string=  'Map data &copy; <a href=\"https://www.openstreetmap.org/\">OpenStreetMap</a> contributors, '\r\n  + '<a href=\"https://creativecommons.org/licenses/by-sa/2.0/\">CC-BY-SA</a>, '\r\n  + 'Imagery © <a href=\"https://www.mapbox.com/\">Mapbox</a>';\r\n\r\nexport {\r\n  URL,\r\n  ATTRIBUTION\r\n}\r\n","import React, { forwardRef, useEffect, useImperativeHandle, useRef } from 'react';\r\nimport L from 'leaflet';\r\nimport './map.scss';\r\nimport { Marker } from './type';\r\n\r\ndelete (L.Icon.Default.prototype as any)._getIconUrl;\r\n\r\nL.Icon.Default.mergeOptions({\r\n  iconRetinaUrl: require('leaflet/dist/images/marker-icon-2x.png'),\r\n  iconUrl: require('leaflet/dist/images/marker-icon.png'),\r\n  shadowUrl: require('leaflet/dist/images/marker-shadow.png'),\r\n})\r\n\r\nexport interface MapOptions {\r\n  center: number[],\r\n  zoom: number,\r\n  // url for tileLayer\r\n  url: string,\r\n  attribution: string,\r\n  markersData: Marker[] | null,\r\n  ref: any,\r\n}\r\n\r\nconst Map = forwardRef(({center, zoom, url, attribution, markersData}: MapOptions, ref: any) => {\r\n  useImperativeHandle(\r\n    ref,\r\n    () => ({\r\n      fitBounds: fitBounds\r\n    })\r\n  )\r\n\r\n  let mapRef = useRef<any>(null);\r\n\r\n  // init map\r\n  useEffect(() => {\r\n    const map = L.map('map', {\r\n      center: L.latLng(center[0], center[1]),\r\n      zoom: zoom,\r\n      // attributionControl: false,\r\n      layers: [\r\n        L.tileLayer(url, {\r\n          attribution\r\n        })\r\n      ]\r\n    });\r\n\r\n    mapRef.current = map;\r\n  }, [center, zoom, url, attribution]);\r\n\r\n  // add layer\r\n  const layerRef = React.useRef<any>(null);\r\n  useEffect(() => {\r\n    layerRef.current = L.featureGroup().addTo(mapRef.current);\r\n  }, []);\r\n\r\n  // update markers\r\n  useEffect(() => {\r\n    // layerRef.current.clearLayers();\r\n    if(markersData !== null) {\r\n      const $markers = markersData.map(marker => {\r\n        return L.marker(L.latLng(marker.point[0],marker.point[1]), {title: marker.title || ''})\r\n      })\r\n      layerRef.current = L.featureGroup($markers).addTo(mapRef.current);\r\n      fitBounds();\r\n    }\r\n  }, [markersData]);\r\n\r\n  const fitBounds = () => {\r\n    mapRef.current.fitBounds(layerRef.current.getBounds(), {\r\n      maxZoom: 16\r\n    });\r\n  }\r\n  return (\r\n    <div id=\"map\" ref={mapRef}></div>\r\n  )\r\n})\r\n\r\nexport default Map;","import React, { useEffect, useState, useRef } from 'react';\r\nimport { ATTRIBUTION, URL } from '../../util/map';\r\nimport Map from './map';\r\nimport { Marker } from './type';\r\n\r\ninterface MapProps {\r\n  fit: boolean,\r\n  setFit: Function,\r\n}\r\n\r\nfunction MapContainer({fit, setFit}: MapProps) {\r\n  const [center, setCenter] = useState([29.896136, 121.644553]);\r\n  const [zoom, setZoom] = useState(15);\r\n  const [markers, setMarkers] = useState<Marker[] | null>(null);\r\n\r\n  // mapref\r\n  const $map = useRef<any>(null);\r\n\r\n  useEffect(() => {\r\n    if (\"geolocation\" in navigator) {\r\n      /* 地理位置服务可用 */\r\n      navigator.geolocation.getCurrentPosition(function(position) {\r\n        handlePos(position);\r\n      });\r\n    } else {\r\n      /* 地理位置服务不可用 */\r\n      alert('有问题');\r\n    }\r\n  }, []);\r\n\r\n  const handlePos = (position: any): void => {\r\n    // 维度 经度\r\n    const {latitude, longitude} = position.coords;\r\n    // todo 算法\r\n    console.log(latitude, longitude);\r\n\r\n    let arr: Marker[] = [];\r\n    arr.push({\r\n      point: [latitude, longitude]\r\n    })\r\n    setMarkers(arr);\r\n  }\r\n\r\n  // invoke fit function from child compoent\r\n  useEffect(() => {\r\n    if(fit) {\r\n      $map.current.fitBounds();\r\n      setFit(false);\r\n    }\r\n  }, [fit])\r\n\r\n  return (\r\n    <Map\r\n      ref={$map} \r\n      center={center} \r\n      zoom={zoom}\r\n      url={URL}\r\n      attribution={ATTRIBUTION}\r\n      markersData={markers}\r\n    />\r\n  )\r\n}\r\n\r\nexport default MapContainer;","import React from \"react\";\r\nimport './menu.scss';\r\n\r\ninterface MenuProps {\r\n  setFit: Function,\r\n}\r\n\r\nfunction Menu({setFit}: MenuProps) {\r\n\r\n  const clickFitBtn = () => {\r\n    setFit(true)\r\n  }\r\n\r\n  return (\r\n    <div className=\"menu-wrapper\">\r\n      <div className=\"pos-btn\" onClick={clickFitBtn}></div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Menu;","import React, { useState } from 'react';\r\nimport './App.scss';\r\nimport MapContainer from './components/map/mapContainer';\r\nimport Menu from './components/menu/menu';\r\n\r\nfunction App() {\r\n  const [fit, setFit] = useState<boolean>(false);\r\n\r\n  return (\r\n    <div className=\"app mobile-wrapper\">\r\n      <MapContainer fit={fit} setFit={setFit} />\r\n      <Menu setFit={setFit} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}